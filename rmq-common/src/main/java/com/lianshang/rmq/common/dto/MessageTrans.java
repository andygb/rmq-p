package com.lianshang.rmq.common.dto;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-29")
public class MessageTrans implements org.apache.thrift.TBase<MessageTrans, MessageTrans._Fields>, java.io.Serializable, Cloneable, Comparable<MessageTrans> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageTrans");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("producerIp", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BIRTH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("birthTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageTransStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessageTransTupleSchemeFactory());
  }

  public long id; // required
  public String producerIp; // required
  public long birthTime; // required
  public ByteBuffer content; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PRODUCER_IP((short)2, "producerIp"),
    BIRTH_TIME((short)3, "birthTime"),
    CONTENT((short)4, "content");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PRODUCER_IP
          return PRODUCER_IP;
        case 3: // BIRTH_TIME
          return BIRTH_TIME;
        case 4: // CONTENT
          return CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __BIRTHTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRODUCER_IP, new org.apache.thrift.meta_data.FieldMetaData("producerIp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIRTH_TIME, new org.apache.thrift.meta_data.FieldMetaData("birthTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageTrans.class, metaDataMap);
  }

  public MessageTrans() {
  }

  public MessageTrans(
    long id,
    String producerIp,
    long birthTime,
    ByteBuffer content)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.producerIp = producerIp;
    this.birthTime = birthTime;
    setBirthTimeIsSet(true);
    this.content = org.apache.thrift.TBaseHelper.copyBinary(content);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageTrans(MessageTrans other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetProducerIp()) {
      this.producerIp = other.producerIp;
    }
    this.birthTime = other.birthTime;
    if (other.isSetContent()) {
      this.content = org.apache.thrift.TBaseHelper.copyBinary(other.content);
    }
  }

  public MessageTrans deepCopy() {
    return new MessageTrans(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.producerIp = null;
    setBirthTimeIsSet(false);
    this.birthTime = 0;
    this.content = null;
  }

  public long getId() {
    return this.id;
  }

  public MessageTrans setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getProducerIp() {
    return this.producerIp;
  }

  public MessageTrans setProducerIp(String producerIp) {
    this.producerIp = producerIp;
    return this;
  }

  public void unsetProducerIp() {
    this.producerIp = null;
  }

  /** Returns true if field producerIp is set (has been assigned a value) and false otherwise */
  public boolean isSetProducerIp() {
    return this.producerIp != null;
  }

  public void setProducerIpIsSet(boolean value) {
    if (!value) {
      this.producerIp = null;
    }
  }

  public long getBirthTime() {
    return this.birthTime;
  }

  public MessageTrans setBirthTime(long birthTime) {
    this.birthTime = birthTime;
    setBirthTimeIsSet(true);
    return this;
  }

  public void unsetBirthTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIRTHTIME_ISSET_ID);
  }

  /** Returns true if field birthTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthTime() {
    return EncodingUtils.testBit(__isset_bitfield, __BIRTHTIME_ISSET_ID);
  }

  public void setBirthTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIRTHTIME_ISSET_ID, value);
  }

  public byte[] getContent() {
    setContent(org.apache.thrift.TBaseHelper.rightSize(content));
    return content == null ? null : content.array();
  }

  public ByteBuffer bufferForContent() {
    return org.apache.thrift.TBaseHelper.copyBinary(content);
  }

  public MessageTrans setContent(byte[] content) {
    this.content = content == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(content, content.length));
    return this;
  }

  public MessageTrans setContent(ByteBuffer content) {
    this.content = org.apache.thrift.TBaseHelper.copyBinary(content);
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case PRODUCER_IP:
      if (value == null) {
        unsetProducerIp();
      } else {
        setProducerIp((String)value);
      }
      break;

    case BIRTH_TIME:
      if (value == null) {
        unsetBirthTime();
      } else {
        setBirthTime((Long)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PRODUCER_IP:
      return getProducerIp();

    case BIRTH_TIME:
      return getBirthTime();

    case CONTENT:
      return getContent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PRODUCER_IP:
      return isSetProducerIp();
    case BIRTH_TIME:
      return isSetBirthTime();
    case CONTENT:
      return isSetContent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MessageTrans)
      return this.equals((MessageTrans)that);
    return false;
  }

  public boolean equals(MessageTrans that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_producerIp = true && this.isSetProducerIp();
    boolean that_present_producerIp = true && that.isSetProducerIp();
    if (this_present_producerIp || that_present_producerIp) {
      if (!(this_present_producerIp && that_present_producerIp))
        return false;
      if (!this.producerIp.equals(that.producerIp))
        return false;
    }

    boolean this_present_birthTime = true;
    boolean that_present_birthTime = true;
    if (this_present_birthTime || that_present_birthTime) {
      if (!(this_present_birthTime && that_present_birthTime))
        return false;
      if (this.birthTime != that.birthTime)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_producerIp = true && (isSetProducerIp());
    list.add(present_producerIp);
    if (present_producerIp)
      list.add(producerIp);

    boolean present_birthTime = true;
    list.add(present_birthTime);
    if (present_birthTime)
      list.add(birthTime);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    return list.hashCode();
  }

  @Override
  public int compareTo(MessageTrans other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProducerIp()).compareTo(other.isSetProducerIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProducerIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.producerIp, other.producerIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthTime()).compareTo(other.isSetBirthTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthTime, other.birthTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MessageTrans(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("producerIp:");
    if (this.producerIp == null) {
      sb.append("null");
    } else {
      sb.append(this.producerIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthTime:");
    sb.append(this.birthTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.content, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (producerIp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'producerIp' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'birthTime' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageTransStandardSchemeFactory implements SchemeFactory {
    public MessageTransStandardScheme getScheme() {
      return new MessageTransStandardScheme();
    }
  }

  private static class MessageTransStandardScheme extends StandardScheme<MessageTrans> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MessageTrans struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.producerIp = iprot.readString();
              struct.setProducerIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BIRTH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.birthTime = iprot.readI64();
              struct.setBirthTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readBinary();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBirthTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'birthTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MessageTrans struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.producerIp != null) {
        oprot.writeFieldBegin(PRODUCER_IP_FIELD_DESC);
        oprot.writeString(struct.producerIp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BIRTH_TIME_FIELD_DESC);
      oprot.writeI64(struct.birthTime);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeBinary(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageTransTupleSchemeFactory implements SchemeFactory {
    public MessageTransTupleScheme getScheme() {
      return new MessageTransTupleScheme();
    }
  }

  private static class MessageTransTupleScheme extends TupleScheme<MessageTrans> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MessageTrans struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.id);
      oprot.writeString(struct.producerIp);
      oprot.writeI64(struct.birthTime);
      BitSet optionals = new BitSet();
      if (struct.isSetContent()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetContent()) {
        oprot.writeBinary(struct.content);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MessageTrans struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      struct.producerIp = iprot.readString();
      struct.setProducerIpIsSet(true);
      struct.birthTime = iprot.readI64();
      struct.setBirthTimeIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.content = iprot.readBinary();
        struct.setContentIsSet(true);
      }
    }
  }

}

